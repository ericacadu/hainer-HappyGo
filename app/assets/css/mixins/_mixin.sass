// --------------------------------
// Default Mixins
// --------------------------------
=background-gradient($startColor: #3C3C3C, $endColor: #999999)
	background-color: $startColor
	background-image: linear-gradient(top, $startColor, $endColor)
	filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}', endColorStr='#{$endColor}')

=background-horizontal($startColor: #3C3C3C, $endColor: #999999)
	background-color: $startColor
	background-image: linear-gradient(left, $startColor, $endColor)
	filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}', endColorStr='#{$endColor}', gradientType='1')

=background-radial($startColor: #FFFFFF, $startPos: 0%, $endColor: #000000, $endPos: 100%)
	background: radial-gradient(ellipse at center, $startColor $startPos, $endColor $endPos)

=border-radius($radius: 5px)
	border-radius: $radius

=border-radius-separate($topLeftRadius: 5px, $topRightRadius: 5px, $bottomLeftRadius: 5px, $bottomRightRadius: 5px)
	border-top-left-radius: $topLeftRadius
	border-top-right-radius: $topRightRadius
	border-bottom-right-radius: $bottomRightRadius
	border-bottom-left-radius: $bottomLeftRadius

=box-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0, 0, 0, 0.4), $inset: "")
	@if $inset != ""
		box-shadow: $inset $x $y $blur $color
	@else
		box-shadow: $x $y $blur $color

=box-sizing($type: border-box)
	box-sizing: $type

=columns($count: 3, $gap: 10)
	column-coun: $count
	column-ga: $gap

=double-borders($colorOne: #3C3C3C, $colorTwo: #999999, $radius: 0)
	border: 1px solid $colorOne
	box-shadow: 0 0 0 1px $colorTwo
	+border-radius($radius)

=flip($scaleX: -1)
	transform: scaleX($scaleX)
	filter: FlipH
	-ms-filter: "FlipH"

=font-face($fontFamily: myFont, $eotFileSrc: "myFont.eot", $woffFileSrc: "myFont.woff", $ttfFileSrc: "myFont.ttf", $svgFileSrc: "myFont.svg", $svgFontID: "#myFont")
	font-family: $fontFamily
	src: url($eotFileSrc) format("eot"), url($woffFileSrc) format("woff"), url($ttfFileSrc) format("truetype"), url($svgFileSrc + $svgFontID) format("svg")

=opacity($opacity: 0.5)
	$opacityMultiplied: $opacity * 100
	filter: alpha(opacity = $opacityMultiplied)
	-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=" + $opacityMultiplied + ")"
	opacity: $opacity

=outline-radius($radius: 5px)
	outline-radius: $radius

=resize($direction: both)
	resize: $direction

=rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0)
	transform: rotate($deg + deg)
	filter: progid:DXImageTransform.Microsoft.Matrix( M11=#{$m11}, M12=#{$m12}, M21=#{$m21}, M22=#{$m22}, sizingMethod='auto expand')
	zoom: 1

=transform($params)
	transform: $params

=scale($scale)
	+transform(scale($scale))

=translate ($x, $y)
	+transform(translate($x, $y))

=skew ($x, $y)
	+transform(skew(#{$x}deg, #{$y}deg))

=text-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0, 0, 0, 0.4))
	text-shadow: $x $y $blur $color

=translate3d($x, $y, $z)
	transform: translate3d($x, $y, $z)

=transform-origin($params)
	transform-origin: $params

=transition($property: all, $duration: .3s, $ease: linear)
	transition: $property $duration $ease

=transform-delay($params)
	transform-delay: $params

=triple-borders($colorOne: #3C3C3C, $colorTwo: #999999, $colorThree: #000000, $radius: 0)
	border: 1px solid $colorOne
	+border-radius($radius)
	+box-shadow(0 0 0 1px #{$colorTwo}, 0 0 0 2px #{$colorThree})

=keyframes($animation-name)
	@keyframes #{$animation-name}
		@content

=animation($params)
	animation: $params

=arrow($direction, $color, $size)
	display: block
	height: 0
	width: 0
	@if $direction == 'top'
		border-left: $size solid transparent
		border-right: $size solid transparent
		border-bottom: $size solid $color
	@else if $direction == 'right'
		border-top: $size solid transparent
		border-bottom: $size solid transparent
		border-left: $size solid $color
	@else if $direction == 'bottom'
		border-top: $size solid $color
		border-right: $size solid transparent
		border-left: $size solid transparent
	@else if $direction == 'left'
		border-top: $size solid transparent
		border-right: $size solid $color
		border-bottom: $size solid transparent
	@else if $direction == 'top-left'
		border-top: $size solid $color
		border-right: $size solid transparent
	@else if $direction == 'top-right'
		border-top: $size solid $color
		border-left: $size solid transparent
	@else if $direction == 'bottom-left'
		border-bottom: $size solid $color
		border-right: $size solid transparent
	@else if $direction == 'bottom-right'
		border-bottom: $size solid $color
		border-left: $size solid transparent

=position($position, $args)
	@each $o in top right bottom left
		$i: index($args, $o)
		@if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number
			#{$o}: nth($args, $i + 1)
	position: $position

=absolute($args)
	+position(absolute, $args)

=fixed($args)
	+position(fixed, $args)

=relative($args)
	+position(relative, $args)

// --------------------------------
// Custom Mixins
// --------------------------------
=clearfix
	&:after
		content: ''
		clear: both
		display: block

=size($width, $height: null)
	width: $width
	height: $height

=flex($justify: center, $align: center)
	display: flex
	justify-content: $justify
	align-items: $align

=bgColors($color, $lightness: 0)
	background: scale-color($color, $lightness)

=valign
	+absolute(top 50%)
	+transform(translateY(-50%))
=halign
	+absolute(left 50%)
	+transform(translateX(-50%))
=centeralign
	+absolute(top 50% left 50%)
	+transform(translate(-50%, -50%))

=margin($args)
	@if type-of(nth($args, 1)) == number or nth($args, 1) == 'auto'
		margin: $args
	@else
		@each $o in top right bottom left
			$i: index($args, $o)
			@if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number
				margin-#{$o}: nth($args, $i + 1)

=padding($args)
	@if type-of(nth($args, 1)) == number
		padding: $args
		@each $key in $args
			$index: index($args, $key)
			@if $index and type-of(nth($args, $index)) != number
				@error '#{$key} 數值有誤'
	@else
		@each $key in top right bottom left
			$index: index($args, $key)
			@if $index and $index + 1 <= length($args) and type-of(nth($args, $index + 1)) == number
				padding-#{$key}: nth($args, $index + 1)
			@else if $index and type-of(nth($args, $index + 1)) != number
				@error '#{$key} 數值有誤'

@function makelongshadow($color)
	$val: 0px 0px $color
	@for $i from 1 through 15
		$val: #{$val}, #{-$i}px #{$i}px #{rgba($color, 0.01)}
	@return $val

@function makelongshadow-pc($color)
	$val: 0px 0px $color
	@for $i from 1 through 32
		$val: #{$val}, #{-$i}px #{$i}px #{rgba($color, 0.01)}
	@return $val

=flat-shadow($color)
	box-shadow: makelongshadow($color)

=flat-shadow-pc($color)
	box-shadow: makelongshadow-pc($color)